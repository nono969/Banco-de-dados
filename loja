CREATE TABLE Cliente (
    id_cliente SERIAL PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    cpf VARCHAR(14) UNIQUE NOT NULL,
    telefone VARCHAR(20),
    email VARCHAR(100)
);
INSERT INTO Cliente(id_cliente, nome, cpf, telefone, email) values
(1, 'João Luis', '1234567892', '8398201849', 'joao.luis@gmail.com'),
(2, 'Maria Fernanda', '5830291837', '8598275110', 'maria.ferna29@gmail.com'),
(3, 'Luis Azevedo', '9302008867', '0839201887', 'luisAzevedo@gmail.com'),
(4, 'Kamyla Felix', '1229038400', '8398271938', 'kamyla.felix@gamil.com'),
(5, 'Rhilary Alves', '1280938670', '8397288100', 'rhilary.alves@gmail.com'),
(6, 'Maria Isabelly', '9302748021', '1181903672', 'maria.isabelly@gmail.com'),
(7, 'Gabriela Liberato', '9902271890', '9330291004', 'gabriela.liberato@gamil.com'),
(8, 'Maria Luiza', '1273682019', '9201927830', 'mariaLuiza@gmail.com'),
(9, 'Roronoa Zoro', '0011010132', '0018293910', 'zoro.solo@gmail.com'),
(10, 'Trafalga Law', '0011928065', '0018289371', 'doctor.law@gmail.com');


CREATE TABLE Veiculo (
    id_veiculo SERIAL PRIMARY KEY,
    modelo VARCHAR(100) NOT NULL,
    marca VARCHAR(50),
    ano INT,
    categoria VARCHAR(50), -- SUV, Sedan, Hatch, etc.
    preco_diaria NUMERIC(10,2),
    disponivel BOOLEAN DEFAULT TRUE
);
insert into Veiculo(id_veiculo, modelo, marca, ano, categoria, preco_diaria, disponivel) values
(11, 'Jetta', 'Volkswagen', '1990', 'SUV', '701920', true),
(12, 'Abarth 500', 'Abarth', '2024', 'Cabrio', '790090', true),
(13, 'Alfa romeo Junior', 'Alfa-romeo', '2020', 'SUV', '10000', true),
(15, 'AudiA6 E-Tron', 'Audi', '2024', 'Cabrio', '649990', false),
(16, 'JEEP Avenger', 'JEEP', '2022', 'SUV', '189990', false),
(17, 'Cupra Leon', 'Cupra', '2024', 'Hacthback', '50341', true);

CREATE TABLE Aluguel (
    id_aluguel SERIAL PRIMARY KEY,
    id_cliente INT REFERENCES Cliente(id_cliente),
    id_veiculo INT REFERENCES Veiculo(id_veiculo),
    data_inicio DATE NOT NULL,
    data_fim DATE NOT NULL,
    valor_total NUMERIC(10,2)
);
insert into Aluguel(id_aluguel, id_cliente, id_veiculo, data_inicio, data_fim, valor_total) values
(1, 4, 13, '2040-09-12', '2040-10-12', '400900'),
(2, 6, 15, '2045-12-03', '2045-12-04', '649990'),
(3, 8, 11, '2020-12-01', '2025-03-19', '205595'),
(4, 5, 13, '2020-02-01', '2020-03-01', '1899909'),
(5, 1, 17, '2020-02-02', '2020-03-02', '18990990');

select * from Veiculo;
select * from Aluguel;
select * from Cliente;


--consulta 1: Liste o nome do cliente e o modelo do veículo que ele alugou.
create view Cliente_veiculos as
select C.nome as clientes, V.modelo as veiculo
from Cliente C
join Aluguel A on C.id_cliente = A.id_cliente
join Veiculo V ON A.id_veiculo = V.id_veiculo;

select * from Cliente_veiculos;


--conculta 2: Liste todos os alugueis com mais de R$ 1000,00, exibindo: nome do cliente, modelo do veículo, valor_total.
create view Alugueis_Total as 
select C.nome as cliente, V.modelo as modelo, A.valor_total as valor_total
from Cliente C
JOIN Aluguel A ON C.id_cliente = A.id_cliente
join Veiculo V ON A.id_veiculo = V.id_veiculo
where valor_total >1000;

select * from Alugueis_Total
order BY valor_total desc;

--consulta 3: Liste todos os veículos que nunca foram alugados.
create view Veiculos_NuncaAlugados as 
select V.id_veiculo, V.modelo, V.marca, V.ano
from Veiculo V 
left join Aluguel A on V.id_veiculo = A.id_veiculo
where A.id_veiculo is null;

SELECT * FROM Veiculos_NuncaAlugados
order by modelo desc;

--consulta 4: Mostre os clientes que já alugaram SUVs, exibindo nome e e-mail.
create view SUVs_Alugados as
select C.nome, C.email, V.categoria as categoria
from Cliente C
join Aluguel A ON C.id_cliente = A.id_cliente
join Veiculo V ON A.id_veiculo = V.id_veiculo
where V.categoria = 'SUV';

SELECT * FROM SUVs_Alugados;

--consulta 5: Calcule o valor total de aluguéis realizados na loja
create view ValorTotal_Alugueis as
SELECT SUM(valor_total) AS ValorTotal
from Aluguel A;

SELECT * FROM ValorTotal_Alugueis;

--consulta 6: Mostre o número de veículos alugados por categoria (SUV, Sedan, etc.).
create view Veiculos_Categorias AS
select count(*) as qtd_alugados, V.categoria as categoria
from Veiculo V
JOIN Aluguel A on V.id_veiculo = A.id_veiculo
group by V.categoria;

select * from Veiculos_Categorias;

--consulta 7: Liste os 5 clientes que mais gastaram em aluguéis.
create view Cliente_Gastaram as
select C.nome as cliente, SUM(A.valor_total) as total_alugados
from Cliente C
JOIN Aluguel A on C.id_cliente = A.id_cliente
group by C.nome
order by total_alugados desc limit 5;

select * from Cliente_Gastaram;

--consulta 8: Calcule a média de valor dos aluguéis por cliente.
create view ClientesMedia_Alugueis as 
select C.nome as clientes, avg(A.valor_total) AS media_clientes
from Cliente C
JOIN Aluguel A ON C.id_cliente = A.id_cliente
GROUP BY C.nome
order by media_clientes desc;

SELECT * FROM ClientesMedia_Alugueis;

--consulta 9: Liste o faturamento total por mês (ano/mês e soma de valor_total).
create view faturamentoTotal_PorMes as 
select to_char(A.data_inicio, 'YYYY-MM') AS ano_mes, sum(A.valor_total) AS faturamento_total
from Aluguel A
group by to_char(A.data_inicio, 'YYYY-MM')
ORDER BY ano_mes;

SELECT * FROM faturamentoTotal_PorMes;

--consulta 10: Mostre: nome do cliente, modelo do veículo, período do aluguel e valor_total.
create view quase_tudo AS
select C.nome AS cliente, V.modelo, A.data_inicio, A.data_fim, A.valor_total
FROM Cliente C
JOIN Aluguel A ON C.id_cliente = A.id_cliente
JOIN Veiculo V ON A.id_veiculo = V.id_veiculo;

SELECT * FROM quase_tudo;

--CONSULTA 11: Mostre o faturamento total por categoria de veículo.
create view Faturamento_Veiculo AS
select V.categoria, sum(A.valor_total) AS faturamento_total
from Veiculo V 
join Aluguel A ON V.id_veiculo = A.id_veiculo
GROUP BY V.categoria
ORDER BY faturamento_total DESC;

SELECT * FROM Faturamento_Veiculo;

--CONSULTA 12:Liste os clientes que já gastaram mais de R$ 5000,00 em aluguéis.
create view GastaramMuita_grana AS
select C.nome, sum(A.valor_total) AS gastos_alugeis
from Cliente C
JOIN Aluguel A ON C.id_cliente = A.id_cliente
group by C.nome
having SUM(A.valor_total) > 5000;

SELECT * FROM GastaramMuita_grana
ORDER BY gastos_alugeis DESC;

--CONSULTA 13: Mostre os 3 veículos mais alugados.
CREATE VIEW tresVeiculosMais_Alugadosss AS 
select count(A.id_aluguel)  as qtde_alufueis, V.modelo
from Veiculo V
join Aluguel A on V.id_veiculo = A.id_veiculo
group by V.modelo
order by qtde_alufueis desc limit 3;

select * from tresVeiculosMais_Alugadosss;






